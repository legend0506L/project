#include <stdio.h>
#include <stdlib.h>
 struct node{
     int data;
     struct node*left;
     struct node* right;};
     
void preorder(struct node*root){
    if(root!=NULL){
        printf("%d",root->data);
        preorder(root->left);
        preorder(root->right);
    }
}
void postorder(struct node*root){
    if(root!=NULL){
        postorder(root->left);
        postorder(root->right);
        printf("%d",root->data);
    }
}
 void inorder(struct node*root){
    if(root!=NULL){
        inorder(root->left);
        printf("%d",root->data);
        inorder(root->right);
    
    }
}
struct node *search(struct node * root,int key){
    if(root==NULL){
        return NULL;
    }
    if(key==root->data){
        return root;
    }else if(key<root->data){
        return search(root->left,key);
    }else{
        return search(root->right,key);
    }
}
 
int main() {
struct node*p=(struct node *)malloc(sizeof(struct node*));
struct node*p1=(struct node *)malloc(sizeof(struct node*));
struct node*p2=(struct node *)malloc(sizeof(struct node*));
struct node*p3=(struct node *)malloc(sizeof(struct node*));
struct node*p4=(struct node *)malloc(sizeof(struct node*));
    p->data=5;
    p1->data=3;
    p2->data=6;
    p3->data=1;
    p4->data=4;
    p->left=p1;
    p->right=p2;
    p1->left=p3;
    p1->right=p4;
    preorder(p);
    printf("\n");
    postorder(p);
    printf("\n");
    inorder(p);
    struct node * n=search(p,1);
    if(n!=NULL){
        printf("\nelement fount%d",n->data);
    }else{printf("not fount");}
    return 0;
}
